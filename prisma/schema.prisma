// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../node_modules/@prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id             Int       @id @default(autoincrement())
  email          String    @unique
  name           String?
  primaryWallet  String?
  createdAt      DateTime  @default(now())

  questions      Question[]
  answers        Answer[]
  ledgerEntries  Ledger[]
}

model Question {
  id               Int       @id @default(autoincrement())
  authorId         Int
  title            String
  bodyMd           String
  ipfsCid          String?
  contentHash      String
  status           String    @default("Open") // 'Open' | 'Verified' | 'Cancelled'
  chainQId         Int?      // On-chain Question ID
  txHash           String?   // Ask transaction
  bountyAmountWei  String    @default("0") // total escrowed (server truth)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime? @updatedAt

  author        User      @relation(fields: [authorId], references: [id])
  answers       Answer[]
  ledgerEntries Ledger[]
}


model Answer {
  id          Int       @id @default(autoincrement())
  questionId  Int
  authorId    Int
  bodyMd      String
  ipfsCid     String?
  contentHash String
  isBest      Boolean   @default(false)
  chainAId    Int?
  createdAt   DateTime  @default(now())

  question    Question  @relation(fields: [questionId], references: [id])
  author      User      @relation(fields: [authorId], references: [id])
}

model Ledger {
  id          Int       @id @default(autoincrement())
  userId      Int?
  questionId  Int?
  kind        String    // 'topup' | 'fund' | 'settlement'
  amountWei   String
  token       String    @default("ETH")
  ref         String?
  txHash      String?
  createdAt   DateTime  @default(now())

  user        User?     @relation(fields: [userId], references: [id])
  question    Question? @relation(fields: [questionId], references: [id])
}

